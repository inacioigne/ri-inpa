networks:
  dspacenet:
    ipam:
      config:
        # Define a custom subnet for our DSpace network, so that we can easily trust requests from host to container.
        # If you customize this value, be sure to customize the 'proxies.trusted.ipranges' env variable below.
        - subnet: 172.23.0.0/16
services:
  # DSpace (backend) webapp container
  api:
    container_name: api
    env_file:
      - .env
    environment:
      dspace__P__dir: /dspace
      # Uncomment to set a non-default value for dspace.server.url or dspace.ui.url
      # dspace__P__server__P__url: http://localhost:8080/server
      # dspace__P__ui__P__url: http://localhost:4000
      dspace__P__name: 'RI INPA'
      # db.url: Ensure we are using the 'dspacedb' image for our database
      db__P__url: 'jdbc:postgresql://dspacedb:5432/dspace'
      # solr.server: Ensure we are using the 'dspacesolr' image for Solr
      solr__P__server: http://dspacesolr:8983/solr
      # matomo.tracker.url: Ensure we are using the 'matomo' image for Matomo
      matomo__P__tracker__P__url: http://matomo
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      proxies__P__trusted__P__ipranges: '172.23.0'
      LOGGING_CONFIG: /dspace/config/log4j2-container.xml
    # image: "${DOCKER_REGISTRY:-docker.io}/${DOCKER_OWNER:-dspace}/dspace:${DSPACE_VER:-latest-test}"
    image: "inpa/api:9.0"
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        DSPACE_VERSION: ${DSPACE_VERSION}
    depends_on:
    - dspacedb
    - dspacesolr
    networks:
      - dspacenet
    ports:
    - published: 8080
      target: 8080
    # - published: 8000
    #   target: 8000
    stdin_open: true
    tty: true
    volumes:
    # Keep DSpace assetstore directory between reboots
    - assetstore:/dspace/assetstore
    # Mount local [src]/dspace/config/ to container. This syncs your local configs with container
    # NOTE: Environment variables specified above will OVERRIDE any configs in local.cfg or dspace.cfg
    - ./api/dspace/config:/dspace/config
    # Ensure that the database is ready BEFORE starting tomcat
    # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
    # 2. Then, run database migration to init database tables
    # 3. Finally, start DSpace
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
      /dspace/bin/dspace database migrate || echo "migration failed";
      java -jar /dspace/webapps/server-boot.jar --dspace.dir=/dspace || echo "server failed";
      tail -f /dev/null
    # entrypoint:
    # - /bin/bash
    # - '-c'
    # - |
    #   while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
    #   /dspace/bin/dspace database migrate
    #   java -jar /dspace/webapps/server-boot.jar --dspace.dir=/dspace
  # DSpace PostgreSQL database container
  dspacedb:
    container_name: dspacedb
    env_file:
      - .env
    # Uses a custom Postgres image with pgcrypto installed
    # image: "${DOCKER_REGISTRY:-docker.io}/${DOCKER_OWNER:-dspace}/dspace-postgres-pgcrypto:${DSPACE_VER:-latest}"
    image: "inpa/dspacedb:9.0"
    build:
      # Must build out of subdirectory to have access to install script for pgcrypto
      context: ./api/dspace/src/main/docker/dspace-postgres-pgcrypto/
      args:
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    environment:
      PGDATA: /pgdata
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      dspacenet:
    ports:
    - published: 5432
      target: 5432
    stdin_open: true
    tty: true
    volumes:
    # Keep Postgres data directory between reboots
    - pgdata:/pgdata
  # DSpace Solr container
  dspacesolr:
    container_name: dspacesolr
    image: "inpa/dspacesolr:9.0"
    build:
      context: ./api/dspace/src/main/docker/dspace-solr/
      # Provide path to Solr configs necessary to build Docker image
      additional_contexts:
        solrconfigs: ./api/dspace/solr/
      args:
        SOLR_VERSION: "${SOLR_VER:-9.8}"
    networks:
      dspacenet:
    ports:
    - published: 8983
      target: 8983
    stdin_open: true
    tty: true
    working_dir: /var/solr/data
    volumes:
    # Keep Solr data directory between reboots
    - solr_data:/var/solr/data
    # NOTE: We are not running Solr as "root", but we need root permissions to copy our cores to the mounted
    # /var/solr/data directory. Then we start Solr as the "solr" user.
    user: root
    # Initialize all DSpace Solr cores then start Solr:
    # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
    # * Second, copy configsets to this core:
    #   Updates to Solr configs require the container to be rebuilt/restarted: `docker compose -p d7 up -d --build dspacesolr`
    # * Third, ensure all new folders are owned by "solr" user
    # * Finally, start Solr as the "solr" user via the provided solr-foreground script
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      init-var-solr
      precreate-core authority /opt/solr/server/solr/configsets/authority
      cp -r /opt/solr/server/solr/configsets/authority/* authority
      precreate-core oai /opt/solr/server/solr/configsets/oai
      cp -r /opt/solr/server/solr/configsets/oai/* oai
      precreate-core search /opt/solr/server/solr/configsets/search
      cp -r /opt/solr/server/solr/configsets/search/* search
      precreate-core statistics /opt/solr/server/solr/configsets/statistics
      cp -r /opt/solr/server/solr/configsets/statistics/* statistics
      precreate-core qaevent /opt/solr/server/solr/configsets/qaevent
      cp -r /opt/solr/server/solr/configsets/qaevent/* qaevent
      precreate-core suggestion /opt/solr/server/solr/configsets/suggestion
      cp -r /opt/solr/server/solr/configsets/suggestion/* suggestion
      chown -R solr:solr /var/solr
      runuser -u solr -- solr-foreground

  # DSpace Angular UI container
  ui:
    container_name: ui
    environment:
      DSPACE_UI_SSL: 'false'
      DSPACE_UI_HOST: ui
      DSPACE_UI_PORT: '4000'
      DSPACE_UI_NAMESPACE: /
      # NOTE: When running the UI in production mode (which the -dist image does),
      # these DSPACE_REST_* variables MUST point at a public, HTTPS URL.
      # This is because Server Side Rendering (SSR) currently requires a public URL,
      # see this bug: https://github.com/DSpace/dspace-angular/issues/1485
      DSPACE_REST_SSL: 'true'
      DSPACE_REST_HOST: ri-api.inpa.gov.br
      DSPACE_REST_PORT: 443
      DSPACE_REST_NAMESPACE: /server
    image: "inpa/angular:9.0-dist"
    build:
      context: ./ui
      dockerfile: Dockerfile.dist
    networks:
      dspacenet:
    ports:
    - published: 4000
      target: 4000
    stdin_open: true
    tty: true

volumes:
  assetstore:
  pgdata:
  solr_data:
